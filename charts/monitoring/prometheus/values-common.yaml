kube-prometheus-stack:
  prometheus:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: sertigo-issuer
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: basic-auth-secret
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      hosts:
        - monitoring.domain
      paths:
        - /prometheus
      tls:
        - secretName: monitoring.domain-tls
          hosts:
            - monitoring.domain
    # This is the basic-auth secret for the nginx ingress to ask for a password
    # See README for credentials
    extraSecret:
      name: basic-auth-secret
      data:
        auth: "auth-username:auth-password-hash"
    prometheusSpec:
      externalUrl: https://monitoring.domain/prometheus
      routePrefix: /prometheus
      retention: 14d
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi

  alertmanager:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: sertigo-issuer
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: basic-auth-secret
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      hosts:
        - monitoring.domain
      paths:
        - /alertmanager
      tls:
        - secretName: monitoring.domain-tls
          hosts:
            - monitoring.domain
    alertmanagerSpec:
      routePrefix: /alertmanager
      externalUrl: https://monitoring.domain/alertmanager

  grafana:
    defaultDashboardsTimezone: Europe/London
    adminPassword: JqUSRx6n1YJgasHx
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: sertigo-issuer
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: basic-auth-secret
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      hosts:
        - monitoring.domain
      path: /grafana
      tls:
        - secretName: monitoring.domain-tls
          hosts:
            - monitoring.domain
    grafana.ini:
      server:
        root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
        serve_from_sub_path: true
      auth.ldap:
        enabled: true
        allow_sign_up: true
        config_file: /etc/grafana/ldap.toml
    ldap:
      enabled: true
      config: |-
        [[servers]]
        # Ldap server host (specify multiple hosts space separated)
        host = "ldap.domain"
        # Default port is 389 or 636 if use_ssl = true
        port = 636
        # Set to true if ldap server supports TLS
        use_ssl = true
        # Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)
        start_tls = false
        # set to true if you want to skip ssl cert validation
        ssl_skip_verify = false
        # set to the path to your root CA certificate or leave unset to use system defaults
        # root_ca_cert = "/path/to/certificate.crt"
        # Authentication against LDAP servers requiring client certificates
        # client_cert = "/path/to/client.crt"
        # client_key = "/path/to/client.key"

        # Search user bind dn
        bind_dn = "uid=%s,ou=people,dc=domain"

        # User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
        # Allow login from email or username, example "(|(sAMAccountName=%s)(userPrincipalName=%s))"
        search_filter = "(uid=%s)"

        # An array of base dns to search through
        search_base_dns = ["ou=people,dc=domain"]

        # Filter groups to only allow users in D374 (EDINA Ops)
        [[servers.group_mappings]]
        group_dn = "cn=groupname,ou=org,dc=domain"
        org_role = "Admin"
        grafana_admin = true

        # Specify names of the ldap attributes your ldap uses
        [servers.attributes]
        name = "givenName"
        surname = "sn"
        username = "uid"
        member_of = "memberOf"
        email =  "mail"
